[
  {
    "objectID": "index.html#simmer",
    "href": "index.html#simmer",
    "title": "Simmer Guide",
    "section": "Simmer",
    "text": "Simmer\nWith simmer, you can use block programming to simulate probability experiments, among other things.\nThis guide assumes you have some CODAP skills:\n\nYou can make graphs.\nYou can make a new attribute (a new column) and give it a simple formula.\n\nDo the three lessons you can see in the sidebar.\n\nSimmer in a new tab\nIf you want to experiment outside of this guide, click the link below to open a simmer document in a new tab. You’ll have more space.\nBookmark it so you can simmer again whenever you want.\n  a fresh simmer document"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "one-die.html#one-die",
    "href": "one-die.html#one-die",
    "title": "simmer",
    "section": "One die",
    "text": "One die\nWe will begin by rolling one die\nMake the program you see below. Notice how the blocks fit together. We have a block that represents a variable (named item), and it “receives” a random number. Then we send that data to CODAP.\n\nIn the live example below, try to build that program. Some hints:\n\nThe gray stripe on the left is called the toolbox.\nThe toolbox contains the names of categories. Click on a name to see the blocks in that category.\nFind the blocks you need in three different categories.\nDrag blocks from the toolbox into the main workspace and hook them together.\nIf you get one you don’t want, you can drag it to the trash can in the lower right.\n\nSee how you do:\n\n\n\n\nWhen you have it the way you want, press the run button (the green circle). A CODAP table appears with your data in it. Run the program a few more times and see how the value of item changes.\nBecause it’s in CODAP, you can make a graph the usual way.\n\n\n\nDoes item look evenly distributed? (Probably not!)"
  },
  {
    "objectID": "two-dice.html#two-dice",
    "href": "two-dice.html#two-dice",
    "title": "simmer",
    "section": "Two dice",
    "text": "Two dice\nOne die is great…but what could be better? Two dice! More than twice as good.\nWe give you a fresh, blank simmer document below. You can start fresh right there or modify what you did above. Try to make a program like this one:\n\n\n\n\n\n\n\nNames are important\n\n\n\nGive your variables meaningful names. Names like die and die2 tell you what’s going on.\nWhen we were just getting started, we used the default name, item. That’s a terrible name for a variable!\n\n\nHere are some tips:\n\nUse the yellow “plus” button near the top-left of the simmer window to make the variables die1 and die2.\nAfter you make a block that sets a variable, you can use the menu in that variable block to change which variable it refers to. You can also use that menu to change the variable’s name.\n\n\n\n\n\nWhen you run your program, simmer will create a column in your CODAP table for every variable in your program. That means you can calculate the sum of the two dice in CODAP.\n\nmake a new column with a formula for the sum of the two dice.\nmake a graph of that sum.\n\nIf you know the theory, you know it’s suppose to look like a pyramid. Does it look the way you expect? Is seven the most popular sum?\nIf not, add a few hundred cases. See if it gets closer to the “official” result.\nNow for something really cool:\n\nImagine a graph with die1 plotted against die2. Stop and think: what will that graph look like?\nMake a new graph and do that plot. Did it look the way you expected?\n\nDid you collapse your code so that you could see the graph better? Don’t forget that tip!\n\nIn the graph of sum, select all the cases with a sum of 5.\n\nYour screen might now look something like this:\n\n\nLook at the other graph, and think about what that means. Use selection in this way to make a convincing argument why seven is the most common result, and why 2 and 12 are the rarest.\n\n\nReflecting\nYou made a probability model using simmer, simulating throws of two dice.\nUsing a “repeat” block—a loop structure— you could throw lots of dice, many more than would be practical in real life.\nFinally, you used the results to learn more about how probability works."
  },
  {
    "objectID": "repeating.html#repeating-many-times",
    "href": "repeating.html#repeating-many-times",
    "title": "simmer",
    "section": "Repeating many times",
    "text": "Repeating many times\nLet’s change the program so that it repeats that process on its own, so that we don’t have to press the button so many times.\nImprove the example below.\n\nFind a “repeat” block in one of the categories that will run those blocks 10 times.\nDrag it into the workspace and make it enclose the blocks you want to repeat.\nRun it and see what happens. (It’s probably still not very evenly distributed.)\nChange the number of repeats to a few hundred and run it again.\nSee if the graph shows that item has a more even distribution.\n\n\n\n\n\nThe screen is getting crowded. It’s hard to work with the program, the graph, and the table at the same time.\n\n\n\n\n\n\npro tip: collapsing the code\n\n\n\nIn the simmer top bar you’ll see a [currently brown] square showing four arrows pointing inward. Press it to collapse the program so you have more space for data analysis.\nThen, when you want to program again, press the button to give yourself room to code."
  },
  {
    "objectID": "examples.html#examples",
    "href": "examples.html#examples",
    "title": "simmer",
    "section": "Examples",
    "text": "Examples\nHere are links to a number of more sophisticated examples of simmer programming and the data that they can generate.\nThese all have a particular form, whihc you might find useful:\n\nThey begin by defining a bunch of variables and giving then initial values.\nThen there is a loop that produces data.\n\nOne way to use the program is to change one or more of the initial values and then run it again. What effect did changing those values have on the results? Why is that?\nOf course, you should make a graph or two or three to display your results, and change those graphs as necessary as you learn more.\n\nSimulated Fbola test results\nWe often use “Fbola” as the name of a fake disease (like Ebola but Fake). In this simulation, we have a test for the disease, but it’s not perfect.\nYou will see parameters for the accuracy of the test in the program. You might even change the program so that these parameters are variables that get output with the other data.\nThe key Bayesian question you should answer right away is, “If I test positive, what’s the probability that I have the disease?”\nhttps://codap.concord.org/releases/latest/static/dg/en/cert/index.html#shared=https%3A%2F%2Fcfm-shared.concord.org%2FOMQspDSoJzGmDty6RdNN%2Ffile.json\n\n\nThe Game of Pig\nA text box in the document describes this important and venerable game.\nOne task is to create an optimal strategy for the game. In thsi program, you have a parameter, limit, that governs when you stop rolling the die. What’s the best value for limit?\nBut there are other possible strategies that don;t involve a limit! Implementing those requires altering the program, or creating a new one altogether.\nhttps://codap.concord.org/releases/latest/static/dg/en/cert/index.html#shared=https%3A%2F%2Fcfm-shared.concord.org%2FxsYmnblFlhqFvKgsnAai%2Ffile.json\n\n\nProjectile\nThis is something different: no probability at all.\nInstead, it’s physics: a numerical simulation of projectile motion.\nThis is very unsophisticated, using the bare minimum Euler’s method kind of calculation. No Runge-Kutta! Not even Simpson’s Rule! But it still looks interesting, and we can explore, among other things, how accurate this simple-minded calculation can be.\nhttps://codap.concord.org/releases/latest/static/dg/en/cert/index.html#shared=https%3A%2F%2Fcfm-shared.concord.org%2FiULaKyZtzZxCAYU4OoHW%2Ffile.json"
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Simmer Guide",
    "section": "",
    "text": "Here are links to a number of more sophisticated examples of simmer programming and the data that they can generate.\nThese all have a particular form, which you might find useful:\n\nThey begin by defining a bunch of variables and giving then initial values.\nThen there is a loop that produces data.\n\nOne way to use the program is to change one or more of the initial values and then run it again. What effect did changing those values have on the results? Why is that?\nOf course, you should make a graph—or two or three—to display your results, and change those graphs as necessary as you learn more.\n\n\nWe often use “Fbola” as the name of a fake disease (like Ebola but Fake). In this simulation, we have a test for the disease, but it’s not perfect.\nYou will see parameters for the accuracy of the test in the program. You might even change the program so that these parameters are variables that get output with the other data.\nThe key Bayesian question you should answer right away is, “If I test positive, what’s the probability that I have the disease?”\n\n\n\n\nA text box in the document describes this important and venerable game.\nOne task is to create an optimal strategy for the game. In this program,a parameter called limit governs when you stop rolling the die. What’s the best value for limit?\nBut there are other possible strategies that don;t involve a limit! Implementing those requires altering the program, or creating a new one altogether.\n  Click this to open a new tab with the game of Pig!\n\n\n\nThis is something different: no probability at all.\nInstead, it’s physics: a numerical simulation of projectile motion.\nThis is very unsophisticated, using the bare minimum Euler’s method kind of calculation. No Runge-Kutta! Not even Simpson’s Rule! But it still looks interesting, and we can explore, among other things, how accurate this simple-minded calculation can be.\n  Click this to open a new tab with the projectile simulation!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Simmer Guide",
    "section": "",
    "text": "With simmer, you can use block programming to simulate probability experiments, among other things.\nThis guide assumes you have some CODAP skills:\n\nYou can make graphs.\nYou can make a new attribute (a new column) and give it a simple formula.\n\nDo the three lessons you can see in the sidebar.\n\n\nIf you want to experiment outside of this guide, click the link below to open a simmer document in a new tab. You’ll have more space.\nBookmark it so you can simmer again whenever you want."
  },
  {
    "objectID": "one-die.html",
    "href": "one-die.html",
    "title": "Simmer Guide",
    "section": "",
    "text": "We will begin by rolling one die\nMake the program you see below. Notice how the blocks fit together. We have a block that represents a variable (named item), and it “receives” a random number. Then we send that data to CODAP.\n\nIn the live example below, try to build that program. Some hints:\n\nThe gray stripe on the left is called the toolbox.\nThe toolbox contains the names of categories. Click on a name to see the blocks in that category.\nFind the blocks you need in three different categories.\nDrag blocks from the toolbox into the main workspace and hook them together.\nIf you get one you don’t want, you can drag it to the trash can in the lower right.\n\nSee how you do:\n\n\n\nWhen you have it the way you want, press the run button (the green circle). A CODAP table appears with your data in it. Run the program a few more times and see how the value of item changes.\nBecause it’s in CODAP, you can make a graph the usual way.\n\n\n\nDoes item look evenly distributed? (Probably not!)"
  },
  {
    "objectID": "repeating.html",
    "href": "repeating.html",
    "title": "Simmer Guide",
    "section": "",
    "text": "Let’s change the program so that it repeats that process on its own, so that we don’t have to press the button so many times.\nImprove the example below.\n\nFind a “repeat” block in one of the categories that will run those blocks 10 times.\nDrag it into the workspace and make it enclose the blocks you want to repeat.\nRun it and see what happens. (It’s probably still not very evenly distributed.)\nChange the number of repeats to a few hundred and run it again.\nSee if the graph shows that item has a more even distribution.\n\n\n\n\nThe screen is getting crowded. It’s hard to work with the program, the graph, and the table at the same time.\n\n\n\n\n\n\npro tip: collapsing the code\n\n\n\nIn the simmer top bar you’ll see a [currently brown] square showing four arrows pointing inward. Press it to collapse the program so you have more space for data analysis.\nThen, when you want to program again, press the button to give yourself room to code."
  },
  {
    "objectID": "two-dice.html",
    "href": "two-dice.html",
    "title": "Simmer Guide",
    "section": "",
    "text": "One die is great…but what could be better? Two dice! More than twice as good.\nWe give you a fresh, blank simmer document below. You can start fresh right there or modify what you did above. Try to make a program like this one:\n\n\n\n\n\n\n\nNames are important\n\n\n\nGive your variables meaningful names. Names like die1 and die2 tell you what’s going on.\nWhen we were just getting started, we used the default name, item. That’s a terrible name for a variable!\n\n\nHere are some tips:\n\nUse the yellow “plus” button near the top-left of the simmer window to make the variables die1 and die2.\nAfter you make a block that sets a variable, you can use the menu in that variable block to change which variable it refers to. You can also use that menu to change the variable’s name.\n\n\n\n\nWhen you run your program, simmer will create a column in your CODAP table for every variable in your program. That means you can calculate the sum of the two dice in CODAP.\n\nmake a new column with a formula for the sum of the two dice.\nmake a graph of that sum.\n\nIf you know the theory, you know it’s suppose to look like a pyramid. Does it look the way you expect? Is seven the most popular sum?\nIf not, add a few hundred cases. See if it gets closer to the “official” result.\nNow for something really cool:\n\nImagine a graph with die1 plotted against die2. Stop and think: what will that graph look like?\nMake a new graph and do that plot. Did it look the way you expected?\n\nDid you collapse your code so that you could see the graph better? Don’t forget that tip!\n\nIn the graph of sum, select all the cases with a sum of 5.\n\nYour screen might now look something like this:\n\n\nLook at the other graph, and think about what that means. Use selection in this way to make a convincing argument why seven is the most common result, and why 2 and 12 are the rarest.\n\n\n\nYou made a probability model using simmer, simulating throws of two dice.\nUsing a “repeat” block—a loop structure— you could throw lots of dice, many more than would be practical in real life.\nFinally, you used the results to learn more about how probability works."
  },
  {
    "objectID": "loaded.html",
    "href": "loaded.html",
    "title": "Simmer Guide",
    "section": "",
    "text": "So far, we have been rolling fair dice, that is, the probability of each number coming up is the same. What if we want to change that?\nOne way is to artificially give the die more faces. Instead of the set of faces being {1, 2, 3, 4, 5, 6}, we’ll make a die where the set is {1, 2, 3, 4, 5, 6, 6}.\nThis takes a little gruntwork in simmer; here is a picture of the code you need. See if you can figure out how it works:\n\nThink about the consequences of this change and predict:\n\nIf you roll this die 70 times, how many 4’s do you “expect?””\nHow many 6’s?\nSketch (on paper or in your head but don’t skip this!) the graph you might see if you just graphed loadedDie in CODAP.\n\nNow try it in the live example below; roll 70 loaded dice and graph the results:\n\n\n\n\n\n\nTip\n\n\n\nTo get the last block in the second line, “theFaces”, you first have to make the variable theFaces as you learned before.\nThen pull an item block out of Variables and use the menu on it to change the name.\n\n\n\n\n\nAs we saw before, you probably didn’t get a very smooth graph, not too close to the “theoretical” distribution.\nSo keep sampling until you have 700 die rolls. Does that look more like the prediction?\n\n\n\nThink about what would happen of you rolled two loaded dice and added? What would the distribution of that sum look like? (Think first, predict, even make a diagram, then try it.)\nIf you had a die, and you didn’t know if it was loaded, how could you tell? This is a job for inference, which we will talk about later.\nYou can use the Make list from text block for more than just loaded dice! Imagine what you could do with this code:\n\n\n\n\n\n\n\n\nHeading towards modeling\n\n\n\nStart to imagine what kinds of things you can simulate. That code, for example, might be part of making a model of a fictitious student body.\n\n\n\n\n\nWe made an intermediate attribute called theFaces. This is an Array, a list of the faces of our die. And we made it using a special, long block you found under Arrays and Lists.\n\nThis block, make list from text, has two arguments:\n\na string containing the list itself, “1,2,3,4,5,6,6” and\nthe delimiter, which is a comma (as a string, so it’s in quotes): “,”.\n\nThe delimiter is the character that separates list items. You could imagine using a dash or even a space as the delimiter…but you can use anything.\nSo theFaces is that whole list. Internally, it’s an Array; it looks like this: [1, 2, 3, 4, 5, 6, 6].\nThen, in the next line, we set loadedDie using a pick from block:\n\n\n\nThree blocks; pick from is in the middle\n\n\nYou found this block under Random, because its job is to pick a random item from the list you give it.\nThen you emit the variables into CODAP, 70 times.\nProbably, nothing will appear under theFaces. That’s normal."
  }
]