```{r}
#| echo: false
source("awash-functions.r")
```

## Two dice

One die is great...but what could be better? Two dice! More than twice as good.

We give you a fresh, blank simmer document below. 
You can start fresh right there or modify what you did above. 
Try to make a program like this one:

![](art/two-dice-program.png){width="4in"}

::: callout-important
## Names are important

Give your variables meaningful names. Names like `die` and `die2` tell you what's going on.

When we were just getting started, we used the default name, `item`. That's a terrible name for a variable!
:::

Here are some tips:

-   Use the yellow "plus" button near the top-left of the `simmer` window to make the variables `die1` and `die2`.
-   After you make a block that sets a variable, you can use the menu in that variable block to change which variable it refers to. You can also use that menu to change the variable's name.

```{r}
#| echo: false
#| results: asis
#| column: page-right

theURL <- "https://codap.concord.org/releases/latest/static/dg/en/cert/index.html?di=https://codap.xyz/plugins/simmer/"

iFrameLink(theURL)
```

When you run your program, you will get a column for every variable in your CODAP table. That means you can make a new column with the sum of the two dice.

-   Do that, and make a graph of the sum.

If you know the theory, you know it's suppose to look like a pyramid. Does it look the way you expect? Is seven the most popular sum?

If not, add a few hundred cases. See if it gets closer to the "official" result.

Now for something really cool:

-   Imagine a graph with `die1` plotted against `die2`. Stop and think: what will that graph look like?
-   Make a new graph and do that plot. Did it look the way you expected?

Did you collapse your code so that you could see the graph better? 
Don't forget that tip!

-   In the graph of `sum`, select all the cases with a sum of 5.

Your screen might now look something like this:

![](art/two-dice-5-selected.png)

-   Look at the other graph, and think about what that means. Use selection in this way to make a convincing argument why seven is the most common result, and why 2 and 12 are the rarest.

### Reflecting

You made a probability model using `simmer`, simulating throws of two dice.

Using a "repeat" block---a loop structure--- you could throw *lots* of dice, many more than would be practical in real life.

Finally, you used the results to learn more about how probability works.
