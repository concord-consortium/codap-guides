{{< include _simmer-header.qmd  >}}

## Functions in simmer

This builds directly on the [n-dice chapter](n-dice.qmd),
so check that out if you haven't read it.

In that chapter, we used this program to 
roll 42 6-sided dice and add them---100 times:

![](art/functions-42D6-program.png){width="80%" fig-align="center"}

Now we will learn how to "encapsulate" that program into a single statement.
We'll *define* a function to do that.

* We'll get a function definition from the **Functions** category in the toolbox. 
It's the top item, labeled **to do something**. (See the illustration at right.)

::: {.column-margin}:::
![](art/functions-function-in-toolbox.png)
:::
* We'll wrap that definition around the statements we want in the function (the same way we wrapped statements in loops).
* Finally, we'll edit **do something** to
give the function a good name, such as
"roll 6 x 42, 100 times."

It will look like this when you're done:

![](art/functions-roll6x42x100%20program.png){width="80%" fig-align="center"}

This function definition is not part of the program that `simmer` executes until you call it.
To get the call, go back to the **Functions** category.
Drag out the function "call" block, which has only the function's name.
It looks like this:

![](art/functions-6x42-call.png){width="30%" fig-align="center"}

And that is the entire program!
So the block window will have two things in it: the function definition (which is long and detailed)
and the program that calls it (which is short and more general).

In the last chapter, we also rolled 21 13-sided dice. 
you will put those instructions into a very similar function called `roll 13 x 21, 100 times`.

Your turn. 
Using the live example below, 

(@) Wrap the code in a loop so you roll those 42 dice 100 times.
(@) Define the first (6-sided die) function as we did above
(@) Select the definition (just click on the "wrapper") and copy it to the clipboard.
(@) **Paste** the definition into your 
workspace (now there are two copies).
(@) Change its name and its instructions
to roll 21 13-sided dice 100 times.
(@) Bring two blocks out of **Functions** to call those two functions and hook them together
(@) Run the program and make a graph of the data. It should look the way it did before!

::: {.column-page-right}
<script>
    const theURL = "https://codap.concord.org/releases/latest/static/dg/en/cert/#shared=https%3A%2F%2Fcfm-shared.concord.org%2FvFDKsaNCbmHS2mlZPYyA%2Ffile.json";
    awash.liveDemoAt(theURL);
</script>
:::

### Advanced functions: using arguments

That was sweet, but as you can see, the two functions
are almost identical.
The loops and everything are structured the same.
There are only two differences:

* The number of rolls (42 and 21) (we'll call those `nRolls`)
* The number of sides of each die (6 and 13) (`nFaces`)

Let's write *one* function to take care of both situations.
It will look like this.
Notice that it is *exactly* like the original function
except that two of the constants in the original 
function are now variables: 

![](art/functions-addMultipleRolls-declaration.png)

* This function has two *arguments*, `nRolls` and `nFaces` (indicated by the **with** at the top).
* It uses those two arguments in the program,
   * `nRolls` as the number of times through the inner loop.
   * `nFaces` as the number of faces on the dice.
* The function repeats the rolling-and-summing bit 100 times,
sending data to CODAP every time through the outer loop.
 
Now the actual program becomes amazingly simple and understandable.
Here it is:

![](art/function-multiple-calls.png){width="40%" fig-align="center"}

### Setting up the arguments

How did we get those arguments?

* Click on the little gear in the function definition block.
A dialog will appear.
![](art/functions-argument-dialog.png)
* Drag the **input name: x** to the inputs bracket on the right. Do this twice; two arguments.
Edit the names there. 
Make them `nRolls` and `nFaces`.
* Click the gear again to make the box go away.
* Drag `nRolls` and `nFaces` out of  **Variables**  and substitite them in the appropriate places in the function definition.

Try it in the live example below (be sure to give the function a name, and don't forget the loop to repeat 100 times!):

::: {.column-page-right}
<script>
    const theURL2 = "https://codap.concord.org/releases/latest/static/dg/en/cert/#shared=https%3A%2F%2Fcfm-shared.concord.org%2FvFDKsaNCbmHS2mlZPYyA%2Ffile.json";
    awash.liveDemoAt(theURL2);
</script>
:::

::: {.callout-caution}
## One function is better than two

Why? 
Because if you have to change it---or fix it---you
only have to do so in one place.

The idea of making code *easier to maintain*
is a very important habit
in computer programming.
:::

::: {.callout-tip}
## Super advanced....

Once you have a function defined, it takes up a lot of space.
If you're confident it's the way you want it:

* Right-click on the function definition.
* Choose **Collapse block**.

This works with *any* block!
Try it!
:::

